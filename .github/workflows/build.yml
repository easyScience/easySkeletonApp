name: macOS, Linux, Windows

# Controls when the action will run. Triggers the workflow on push events
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:

    # CI skip conditions
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Build matrix for different platforms
    strategy:
      matrix:
        os: [ubuntu-latest] #[macos-latest, ubuntu-latest, windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check-out the repository
      uses: actions/checkout@v2

    - name: Set up the Python environment
      uses: actions/setup-python@v2
      with:
          python-version: 3.7

    - name: Setup project config parser
      run: pip install toml

    - name: Declare env variables
      shell: bash
      run: |
        echo ::set-env name=SHORT_GITHUB_REF::${GITHUB_REF#refs/*/}
        echo ::set-env name=SCRIPTS_PATH::$(python pyproject.py ci.project.subdirs.scripts)
        echo ::set-env name=DOWNLOAD_PATH::$(python pyproject.py ci.project.subdirs.download)
        echo ::set-env name=DISTRIBUTION_PATH::$(python pyproject.py ci.project.subdirs.distribution)
        echo ::set-env name=APP_NAME::$(python pyproject.py tool.poetry.name)
        echo ::set-env name=POETRY_VENV_PATH::$(python pyproject.py ci.poetry.venv_path.${{ matrix.os }})
        echo ::set-env name=QTIFW_PATH::$(python pyproject.py ci.qtifw.setup.installation_path.${{ matrix.os }})

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.POETRY_VENV_PATH }}
          ${{ env.QTIFW_PATH }}
          ${{ env.DOWNLOAD_PATH }}
        key: ${{ matrix.os }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Set up python packages manager
      uses: Gr1N/setup-poetry@v2

    - name: Create venv and install dependences
      run: poetry update

    - name: Create freezed python app
      run: poetry run python ${{ env.SCRIPTS_PATH }}/FreezeApp.py

    - name: Create app installer
      run: poetry run python ${{ env.SCRIPTS_PATH }}/MakeInstaller.py

    - name: Install and run app in test mode to create video tutorials
      if: runner.os == 'macOS'
      run: |
        poetry run python ${{ env.SCRIPTS_PATH }}/InstallApp.py
        poetry run python ${{ env.SCRIPTS_PATH }}/RunApp.py test
        poetry run python ${{ env.SCRIPTS_PATH }}/CreateTutorials.py

    - name: Upload video tutorials
      if: runner.os == 'macOS'
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Upload video tutorials

    - name: Create zip of archived artifacts
      run: poetry run python ${{ env.SCRIPTS_PATH }}/ZipArtifacts.py ${{ runner.os }} ${{ env.SHORT_GITHUB_REF }}

    - name: Upload artifacts to GitHub releases
      uses: ncipollo/release-action@v1
      with:
        draft: true
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        commit: ${{ env.SHORT_GITHUB_REF }}
        tag: ${{ env.SHORT_GITHUB_REF }}
        artifacts: "${{ env.DISTRIBUTION_PATH }}/${{ env.APP_NAME }}-*.zip"
